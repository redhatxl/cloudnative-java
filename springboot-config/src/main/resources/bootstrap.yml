spring:
  profiles:
    ## 如果 PROFILE 为空，则使用dev
    active: ${PROFILE:dev}
  application:
    name: springboot-config
  cloud:
    # 监控k8s configmap/secret api获取配置
    kubernetes:
      reload:
        #自动更新配置的开关设置为打开
        enabled: true
        #更新配置信息的模式：polling是主动拉取，event是事件通知
        #    1.polling：从 ConfigMap 和 Secret 中定期刷新配置，检测是否进行了修改。
        #    2.event（默认）：监视配置映射或机密的更改。任何事件都会对配置进行重新检查，如果发生更改，则会重新加载。
        mode: polling
        # 主动拉取的间隔时间是500毫秒
        period: 500
        #是否监控 Secret 的更改来执行更新

        monitoring-secrets: true
        #刷新模式：
        #    (1)、refresh（默认）：仅注释@ConfigurationProperties或@RefreshScope重新加载的配置Bean
        #    (2)、restart_context：整个Spring ApplicationContext正常重启。使用新配置重新创建Bean。
        #    (3)、shutdown：关闭以激活容器的重启。使用此级别时，请确保将所有非守护程序线程的生命周期绑定到该级别，
        #         并将ApplicationContext 复制控制器或副本集配置为重新启动该pod。
        strategy: refresh
      config:
        namespace: springconfig
        name: ${spring.application.name}-cm
      # 模式仅启动configmap获取，启用secret使用enable-api
      secrets:
        # 启用通过 K8S API 发现 Secret 配置，默认不开启
        enable-api: true
        namespace: springconfig
        name: ${spring.application.name}-secret
        #labels:                  #指定 Label 标签名词，根据这个标签筛选 Secret，读取其中配置
        #  secret: enabled        #自定义的 Label


management:
  endpoint:
    restart:
      enabled: true
    health:
      enabled: true
    info:
      enabled: true
